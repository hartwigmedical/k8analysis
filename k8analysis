#!/usr/bin/env bash

REPO_DIR_NAME="$(dirname "$0")" || exit 1

source "${REPO_DIR_NAME}/src/analysis_tools" || exit 1

SCRIPT_NAME="$(basename "$0")" || exit 1

DEFAULT_DOCKER_IMAGE_FILE_NAME="${REPO_DIR_NAME}/default_docker_image_at_k8.txt"

print_usage(){
  echo "USAGE: $0 run --job-name <job-name> <many arguments>"
  echo "USAGE: $0 version"
  echo "USAGE: $0 build --name <image-name>"
  echo "USAGE: $0 push --name <image-name>"
  echo "USAGE: $0 set-default --name <image-name>"
  echo "Run these subcommands without arguments for more detailed documentation"
  echo ""
  echo "run               Run analysis jobs in Kubernetes."
  echo "version           Get the name of the current default Docker image for running jobs."
  echo "build             Build new Docker image."
  echo "push              Push new Docker image to GCP."
  echo "set-default       Set Docker image at GCP to default version for running jobs."
}

print_build_usage(){
  echo "Build new Docker image"
  echo "USAGE: $0 build --name <image-name>"
  echo "  [-n/--name]  (Required)    Name of the Docker image"
}

print_push_usage(){
  echo "Push Docker image to GCP. If name-version combination exists, please rebuilt and push with new name."
  echo "USAGE: $0 push --name <image-name>"
  echo "  [-n/--name]  (Required)    Name of the Docker image"
}

print_run_usage(){
  echo "Run analysis tools in Kubernetes."
  echo "USAGE: $0 run \ "
  echo "    --job-name <job-name> \ "
  echo "    --docker-image <docker-image> \ "
  echo "    \${job_args}"
  echo "  [-n/--job-name]                           (Required)    Name of the Kubernetes job"
  echo "  [-d/--docker-image]                       (Optional)    Name of the Docker image that should be used."
  echo "                                                          If not provided, uses the image that has been set as default."
  echo "The possible jobs are:"
  echo "dna_align, non-umi-dedup, umi-dedup, flagstat, count-mapping-coords"
  echo ""
  echo "dna_align:                    Run bwa mem alignment of paired reads FASTQ."
  echo "non-umi-dedup:            Deduplicate bam with sambamba markdup whilst ignoring UMI's."
  echo "umi-dedup:                Deduplicate bam with UMI-Collapse by taking UMI's into account."
  echo "flagstat:                 Collect flagstat stats for bam with sambamba flagstat."
  echo "count-mapping-coords      Count unique mapping positions present in bam."
  echo ""
  echo "Run the run command with a job without further arguments to get more details on the job and required arguments, e.g. $0 run dna_align"
  echo ""
  echo "Multiple jobs can be executed sequentially by providing run with the appropriate arguments for both, e.g.:"
  echo "$0 run \ "
  echo "    dna_align \ "
  echo "        --ref-genome 38 \ "
  echo '        --input "gs://some-fastq/path/*.fastq.gz" \ '
  echo '        --output "gs://some/bam/path.bam" \ '
  echo '    non-umi-dedup \ '
  echo '        --input "gs://some/bam/path.bam" \ '
  echo '        --output "gs://some/deduplicated/bam/path"'
  echo ""
  echo "If you want the output of one command to function as the input of the next command, then give both the same bucket path."
  echo "Redownloading of locally available files is skipped. If you are not interested in the intermediary "
  echo "files of a sequence of analysis jobs then put all of them in a specific separate directory. That way you can delete "
  echo "them all at once when the analysis jobs are done."
  echo ""
  echo "If the output file of a job already exists in the bucket then that job is skipped."
}

print_set_default_usage(){
  echo "Set Docker image as default image for runs."
  echo "USAGE: $0 set-default --name <image-name>"
  echo "  [-n/--name]  (Required)    Name of the Docker image"
}

k8analysis() {
  if [ $# -lt 1 ]; then
    print_usage && exit 1
  fi

  local CMD=$1 && shift
  case $CMD in
  build)
    build "$@";;
  push)
    push "$@";;
  run)
    run "$@";;
  set-default)
    set_default "$@";;
  version)
    version "$@";;
  *)
    print_usage && exit 1;;
  esac
}

build() {
  local unrecognized=()
  local key
  local name
  while [[ $# -gt 0 ]]
  do
    key="$1" && shift
    case $key in
      -n|--name)
        name="$1" && shift;;
      *)
        unrecognized+=("${key}");;
    esac
  done
  
  # sanity checks
  local input_error=false
  if [[ ! ${#unrecognized[@]} -eq 0 ]]; then
    print_error_msg "unrecognized options to ${SCRIPT_NAME}: options=(${unrecognized[*]})"
    input_error=true
  fi
  if [[ -z ${name} ]]; then
    print_error_msg "Variable 'name' has not been set"
    input_error=true
  fi
  if [[ ${input_error} == true ]]; then
    echo ""
    print_build_usage && exit 1
  fi

  docker build "${REPO_DIR_NAME}" -t "${name}" || die "Failed Docker build"

  echo "The build has succeeded."
  echo "If you want to push this image to GCP, run the following command:"
  echo "  $0 push --name ${name}"
}

push() {
  local unrecognized=()
  local key
  local name
  while [[ $# -gt 0 ]]
  do
    key="$1" && shift
    case $key in
      -n|--name)
        name="$1" && shift;;
      *)
        unrecognized+=("${key}");;
    esac
  done

  # sanity checks
  local input_error=false
  if [[ ! ${#unrecognized[@]} -eq 0 ]]; then
    print_error_msg "unrecognized options to ${SCRIPT_NAME}: options=(${unrecognized[*]})"
    input_error=true
  fi
  if [[ -z ${name} ]]; then
    print_error_msg "Variable 'name' has not been set"
    input_error=true
  fi
  if [[ ${input_error} == true ]]; then
    echo ""
    print_push_usage && exit 1
  fi

  echo "Checking whether image with name '${name}' already exists at GCP"
  already_pushed=$(image_has_already_been_pushed "${name}")

  if [[ ${already_pushed} ]]; then
    die "Image with ${name} has already been pushed to GCP. Please rebuild with a newer version of the image name. Run '$0 version' to see the current default version."
  else
    echo "Pushing new image ${name} to GCP"
    docker push "${name}" || die "Failed Docker push"
    echo "Pushed new image ${name} to GCP"
    echo "If you wish to set this image as the new default image, run the following command:"
    echo "  $0 set-default --name ${name}"
  fi
}

set_default() {
  local unrecognized=()
  local key
  local name
  while [[ $# -gt 0 ]]
  do
    key="$1" && shift
    case $key in
      -n|--name)
        name="$1" && shift;;
      *)
        unrecognized+=("${key}");;
    esac
  done

  # sanity checks
  local input_error=false
  if [[ ! ${#unrecognized[@]} -eq 0 ]]; then
    print_error_msg "unrecognized options to ${SCRIPT_NAME}: options=(${unrecognized[*]})"
    input_error=true
  fi
  if [[ -z ${name} ]]; then
    print_error_msg "Variable 'name' has not been set"
    input_error=true
  fi
  if [[ ${input_error} == true ]]; then
    echo ""
    print_set_default_usage && exit 1
  fi

  echo "Checking whether image with name '${name}' exists at GCP"
  already_pushed=$(image_has_already_been_pushed "${name}")

  if [[ ${already_pushed} ]]; then
    set_default_docker_image_at_k8 "${name}" || die "Could not set Default Docker image"
    echo "Default Docker image for runs has been set to ${name}"
  else
    die "Cannot set ${name} as default image since it does not exist at GCP."
  fi
}

run() {
  local other_arguments=()
  local key
  local job_name
  local docker_image
  while [[ $# -gt 0 ]]
  do
    key="$1" && shift
    case $key in
      -n|--job-name)  # required
        job_name="$1" && shift;;
      -d|--docker-image)  # optional
        docker_image="$1" && shift;;
      *)
        other_arguments+=("${key}");;
    esac
  done

  # sanity checks
  local input_error=false
  if [[ -z ${job_name} ]]; then
    print_error_msg "Variable 'job-name' has not been set"
    input_error=true
  fi
  if [[ ${#other_arguments[*]} -eq 0 ]]; then
    print_error_msg "No jobs specified. Specify at least one run job"
    input_error=true
  fi
  if [[ ${input_error} == true ]]; then
    echo ""
    print_run_usage && exit 1
  fi

  # set default if needed
  if [[ -z ${docker_image} ]]; then
    docker_image="$(get_default_docker_image_at_k8)" || die "Could not find default Docker image name"
  fi

  # Make sure correct credentials are available
  gcloud container clusters get-credentials research-cluster-prod-1 --region europe-west4 --project hmf-crunch \
        || die "Could not find credentials at gcp"

  local clean_job_name
  clean_job_name="$(echo "${job_name}" | awk '{print tolower($0)}' | tr '_' '-' | tr '[:upper:]' '[:lower:]' | tr '.' '-')"

  args_string=$(trim_excess_whitespace "${other_arguments[*]}") || die "Could not get command line arguments as a string"

  info "Start local dry-run to check argument parsing"
  ./src/python_dry_run_analysis "${args_string}" || die "Dry run failed"
  info "Finished local dry-run to check argument parsing"

  sed \
  -e "s/VAR_JOB_NAME/${clean_job_name}/g" \
  -e "s#DOCKER_IMAGE#${docker_image}#g" \
  -e "s#RUN_ARGS#${args_string}#g" \
  "${REPO_DIR_NAME}/k8/hmf-crunch/deploy.yaml" \
  | kubectl create -f -  # use # as separator to handle / properly
}

version() {
  local default_docker_image
  default_docker_image="$(get_default_docker_image_at_k8)" || die "Could not find default Docker image name"
  echo "Current default Docker image version at k8: ${default_docker_image}"
}

get_default_docker_image_at_k8() {
  cat "${DEFAULT_DOCKER_IMAGE_FILE_NAME}"
}

set_default_docker_image_at_k8() {
  local name=$1 && shift
  [[ -n ${name} ]] || die "Not enough arguments to ${FUNCNAME[0]}"
  echo "${name}" > "${DEFAULT_DOCKER_IMAGE_FILE_NAME}"
}

image_has_already_been_pushed() {
  local name=$1 && shift
  [[ -n ${name} ]] || die "Not enough arguments to ${FUNCNAME[0]}"
  docker manifest inspect "${name}"
}

k8analysis "$@"
